
# Settings -----------------------------------------------

# define variables
variables:
  DO_CI: "true"
  # append commit message with '--ci-run-merge'
  # Special flags:
  # append commit message with '--ci-run-examples'
  # append commit message with '--ci-run-compatibility'

# define base settings
.base-job:
  image:
    name: tobiasladnertum/cora:r2024b
    entrypoint: [""]
  tags:
    - matlab
  # default timeout
  timeout: 1h
  rules:
    - if: $CI_PIPELINE_SOURCE == 'merge_request_event'
      when: always
  before_script: 
    # any non-zero exit code should fail the job
    - set +e

# define stages
stages:
  - test
  - short
  - extended
  - compatibility
  - examples

# Test stage --------------------------------------------------------------

# test job
test-job:
  extends: .base-job
  stage: test
  rules:
    - when: never
  script: 
    - matlab -batch "addpath(genpath('.')); test_requiredToolboxes"

# Short test stage --------------------------------------------------------

# define base run using runTestSuite
.base-runTestSuite:
  extends: .base-job
  rules: 
    - !reference [.base-job, rules]
    - if: $DO_CI == "true"
      when: always
  variables:
    testSuite: 'short'
  script: 
    # reset CORA
    - matlab -batch "addpath(genpath('.')); resetCORA();"
    
    # remove unitTestsStatus.mat in case runTestSuite fails and old 'successful' run is still present
    - if [ -f "./unitTests/unitTestsStatus.mat" ]; then rm -Rf ./unitTests/unitTestsStatus.mat; fi

    # run testSuite
    - matlab -batch "addpath(genpath('.')); maxNumCompThreads(4); runTestSuite('$testSuite');"

    # check test results
    - matlab -batch "addpath(genpath('.')); writeTestResultsForCI('$testSuite');"

    # reset CORA
    - matlab -batch "addpath(genpath('.')); resetCORA();"
    - if [ -d "./DLT_CustomLayers" ]; then rm -Rf ./DLT_CustomLayers; fi
    
    # exit with exit code (EXIT_CODE=0 means 'Job succeeded')
    - if [ -f "failed.txt" ]; then EXIT_CODE=$(<failed.txt); else EXIT_CODE=1; fi
    - rm failed.txt
    - echo "Exiting with code $EXIT_CODE."
    - exit $EXIT_CODE
  after_script: # all done in script

# run short tests
test-short:
  stage: short
  extends: .base-runTestSuite
  variables:
    testSuite: 'short'

# Extended test stage -----------------------------------------------------

.base-runTestSuite-ext:
  stage: extended
  extends: .base-runTestSuite
  rules: 
    - !reference [.base-job, rules]
    - if: $DO_CI == "true" && 
            ($CI_COMMIT_MESSAGE =~ /^(.|\r|\n)*--ci-run-merge(.|\r|\n)*/
                || $CI_COMMIT_BRANCH == "PUBLIC" 
                || $CI_COMMIT_BRANCH == "public-bugfix" 
                || $CI_COMMIT_BRANCH == "devgeneral" 
            )
      when: always

# run long duration tests
test-long:
  extends: .base-runTestSuite-ext
  timeout: 3h
  variables:
    testSuite: 'long'

# run nn tests
test-nn:
  extends: .base-runTestSuite-ext
  variables:
    testSuite: 'nn'
  rules: 
    - !reference [.base-runTestSuite-ext, rules]
    # always run on 'nn-*' branches
    - if: $DO_CI == "true" && $CI_COMMIT_BRANCH =~ "/^nn-.*/"
      when: always

# run flaky tests
test-flaky:
  extends: .base-runTestSuite-ext
  variables:
    testSuite: 'flaky'

# Compatibility with other versions ---------------------------------------

.base-runTestSuite-compatibility:
  extends: .base-runTestSuite-ext
  stage: compatibility
  image:
    name: tobiasladnertum/cora:$matlabVersion
  variables:
    testSuite: 'short'
  rules:
    - !reference [.base-runTestSuite-ext, rules]
    # additionally run if compatibility should be tested
    - if: $DO_CI == "true" && $CI_COMMIT_MESSAGE =~ /^(.|\r|\n)*--ci-run-compatibility(.|\r|\n)*/
      when: always

# run 2022b
test-compatibility-2022b:
  extends: .base-runTestSuite-compatibility
  variables:
    matlabVersion: 'r2022b'

# run 2023b
test-compatibility-2023b:
  extends: .base-runTestSuite-compatibility
  variables:
    matlabVersion: 'r2023b'

# run 2024a
test-compatibility-2024a:
  extends: .base-runTestSuite-compatibility
  variables:
    matlabVersion: 'r2024a'

# run 2024a
test-compatibility-2024b:
  extends: .base-runTestSuite-compatibility
  variables:
    matlabVersion: 'r2024b'

# Examples test stage ---------------------------------------------------------

.base-runTestSuite-examples:
  stage: examples
  extends: .base-runTestSuite
  timeout: 24h
  rules: 
    - !reference [.base-runTestSuite-ext, rules]
    # run all tests if commit message contains '--ci-run-examples'
    - if: $DO_CI == "true" && $CI_COMMIT_MESSAGE =~ /^(.|\r|\n)*--ci-run-examples(.|\r|\n)*/
      when: always

# run examples
test-examples:
  extends: .base-runTestSuite-examples
  variables:
    testSuite: 'examples'

# run benchmarks (long examples)
test-benchmarks:
  extends: .base-runTestSuite-examples
  variables:
    testSuite: 'benchmarks'

# run website live scripts
test-website:
  extends: .base-runTestSuite-examples
  variables:
    testSuite: 'website'

# run examples in header
test-header:
  extends: .base-runTestSuite-examples
  variables:
    testSuite: 'header'

